<?xml version="1.0" encoding="UTF-8"?>
<agent xmlns="github.com/agentflare-ai/agentml/agent"
       datamodel="ecmascript"
       use:events="../schemas/events.json"
       use:memory="github.com/agentflare-ai/agentml/memory"
       use:gemini="github.com/agentflare-ai/agentml/gemini"
       use:stdin="github.com/agentflare-ai/agentml/stdin">

  <!--
    Flight Specialist Agent

    Handles all flight-related operations: search, book, update, cancel.
    Invoked by main customer support agent when user intent is flight-related.

    Parameters:
    - user_message: The user's input message
    - passenger_id: Current passenger/user ID

    Returns:
    - response: The message to display to the user
  -->

  <datamodel>
    <data id="user_message" expr="''" />
    <data id="passenger_id" expr="''" />
    <data id="llm_response" expr="''" />
    <data id="pending_action" expr="null" />
    <data id="confirmation_response" expr="''" />
  </datamodel>

  <!-- Initial state: classify the flight request -->
  <state id="classify">
    <onentry>
      <log label="SYSTEM" expr="'Flight specialist processing: ' + user_message" />

      <gemini:generate
        model="gemini-2.0-flash-exp"
        location="_event"
        promptexpr="'Process flight request: ' + user_message" />

      <log label="SYSTEM" expr="'Flight specialist generated event: ' + JSON.stringify(_event)" />
    </onentry>

    <!-- Safe operations (search) -->
    <transition event="action.search"
                event:schema="events:#/components/schemas/ActionSearch"
                target="search" />

    <!-- Sensitive operations (book, update, cancel) -->
    <transition event="action.requires_confirmation"
                event:schema="events:#/components/schemas/ActionRequiresConfirmation"
                target="confirm" />

    <!-- Information response -->
    <transition event="action.response"
                event:schema="events:#/components/schemas/ActionResponse"
                target="respond" />

    <!-- Need more information -->
    <transition event="action.needs_info"
                event:schema="events:#/components/schemas/ActionNeedsInfo"
                target="respond" />

    <!-- CompleteOrEscalate - task complete -->
    <transition event="complete_or_escalate"
                event:schema="events:#/components/schemas/CompleteOrEscalate"
                target="complete" />
  </state>

  <!-- Search flights -->
  <state id="search">
    <onentry>
      <log label="SYSTEM" expr="'Executing flight search...'" />

      <script>
        var searchParams = _event.data.criteria || {};
        var departure = searchParams.from || '';
        var arrival = searchParams.to || '';
        var date = searchParams.date || '';

        // Build SQL query
        var query = 'SELECT flight_id, flight_no, departure_airport, arrival_airport, scheduled_departure, scheduled_arrival FROM flights WHERE 1=1';
        if (departure) query += " AND departure_airport LIKE '%" + departure + "%'";
        if (arrival) query += " AND arrival_airport LIKE '%" + arrival + "%'";
        if (date) query += " AND DATE(scheduled_departure) = '" + date + "'";
        query += ' LIMIT 10';
      </script>

      <memory:query sqlexpr="query" location="flight_results" />

      <script>
        if (flight_results && flight_results.length > 0) {
          llm_response = 'I found ' + flight_results.length + ' flights:\n';
          flight_results.forEach(function(f, idx) {
            llm_response += (idx + 1) + '. Flight ' + f.flight_no + ' from ' + f.departure_airport + ' to ' + f.arrival_airport;
            llm_response += ' departing ' + f.scheduled_departure + '\n';
          });
        } else {
          llm_response = 'No flights found matching your criteria. Please try different search parameters.';
        }
      </script>

      <log label="SYSTEM" expr="'Flight search results: ' + llm_response" />
    </onentry>
    <transition target="respond" />
  </state>

  <!-- Confirm action -->
  <state id="confirm">
    <onentry>
      <log label="SYSTEM" expr="'Requesting confirmation for flight action...'" />

      <assign location="pending_action" expr="_event.data" />
      <assign location="llm_response" expr="_event.data.confirmation_message" />

      <log label="BOT" expr="llm_response" />

      <stdin:read location="confirmation_response" prompt="Confirm (yes/no): " />

      <gemini:generate
        model="gemini-2.0-flash-exp"
        location="_event"
        promptexpr="'Did user confirm? Response: ' + confirmation_response" />

      <log label="SYSTEM" expr="'Confirmation event: ' + JSON.stringify(_event)" />
    </onentry>

    <transition event="confirmation.accepted"
                event:schema="events:#/components/schemas/ConfirmationAccepted"
                target="execute" />

    <transition event="confirmation.declined"
                event:schema="events:#/components/schemas/ConfirmationDeclined"
                target="cancel" />
  </state>

  <!-- Execute confirmed action -->
  <state id="execute">
    <onentry>
      <log label="SYSTEM" expr="'Executing confirmed flight action...'" />

      <script>
        var action_key = 'flight_action_' + Date.now();
      </script>

      <memory:put keyexpr="action_key" expr="pending_action" />

      <script>
        var action_type = pending_action.action_type;
        if (action_type && action_type.includes('booking')) {
          var user_bookings_key = 'user_' + (passenger_id || 'guest') + '_bookings';
        }
      </script>

      <memory:get keyexpr="user_bookings_key" location="user_bookings" />

      <script>
        if (user_bookings_key) {
          if (!user_bookings) user_bookings = [];
          user_bookings.push({
            type: action_type,
            details: pending_action.details,
            timestamp: Date.now(),
            status: 'confirmed'
          });
        }
      </script>

      <memory:put keyexpr="user_bookings_key" expr="user_bookings" />

      <log label="SYSTEM" expr="'Flight action stored: ' + action_key" />

      <!-- Use Lite model for fast confirmation message -->
      <gemini:generate
        model="gemini-2.5-flash-lite"
        location="_event"
        promptexpr="'Generate confirmation message for completed flight ' + action_type" />

      <assign location="llm_response" expr="_event.data.message" />

      <log label="BOT" expr="llm_response" />
    </onentry>
    <transition target="respond" />
  </state>

  <!-- Cancel action -->
  <state id="cancel">
    <onentry>
      <log label="SYSTEM" expr="'Flight action cancelled by user'" />

      <!-- Use Lite model for fast cancellation message -->
      <gemini:generate
        model="gemini-2.5-flash-lite"
        location="_event"
        promptexpr="'Generate friendly cancellation message for flight action'" />

      <assign location="llm_response" expr="_event.data.message" />

      <log label="BOT" expr="llm_response" />
    </onentry>
    <transition target="respond" />
  </state>

  <!-- Respond state -->
  <state id="respond">
    <onentry>
      <log label="SYSTEM" expr="'Flight specialist sending response...'" />

      <script>
        if (_event && _event.data && _event.data.message) {
          llm_response = _event.data.message;
        }
      </script>

      <log label="BOT" expr="llm_response" />
    </onentry>
    <transition target="complete" />
  </state>

  <!-- Complete state -->
  <state id="complete">
    <onentry>
      <log label="SYSTEM" expr="'Flight specialist task complete'" />
    </onentry>
    <transition target="done" />
  </state>

  <!-- Final state with response data -->
  <final id="done">
    <donedata>
      <param name="response" expr="llm_response" />
    </donedata>
  </final>

</agent>
