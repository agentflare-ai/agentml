<?xml version="1.0" encoding="UTF-8"?>
<agent xmlns="github.com/agentflare-ai/agentml/agent"
       datamodel="ecmascript"
       use:events="../schemas/events.json"
       use:memory="github.com/agentflare-ai/agentml/memory"
       use:gemini="github.com/agentflare-ai/agentml/gemini">

  <!--
    Policy Specialist Agent

    Handles policy lookup queries using vector search.

    Parameters:
    - user_message: The user's policy question

    Returns:
    - response: The policy answer
  -->

  <datamodel>
    <data id="user_message" expr="''" />
    <data id="llm_response" expr="''" />
  </datamodel>

  <state id="lookup">
    <onentry>
      <log label="SYSTEM" expr="'Policy specialist looking up: ' + user_message" />

      <!-- Generate embedding for semantic search -->
      <memory:embed location="query_embedding" textexpr="user_message" />

      <!-- Search for relevant policy documents -->
      <memory:search location="policy_results" expr="query_embedding" topk="5" />

      <script>
        // Store relevant policy context for LLM
        var policy_context = '';
        if (policy_results && policy_results.length > 0) {
          policy_context = policy_results.map(function(r) {
            return r.content;
          }).join('\n\n');
        }
      </script>

      <!-- Use LLM to generate response based on policy documents -->
      <gemini:generate
        model="gemini-2.0-flash-exp"
        location="_event"
        promptexpr="'Answer policy question using context: ' + user_message + '\n\nContext: ' + policy_context" />

      <log label="SYSTEM" expr="'Generated event: ' + JSON.stringify(_event)" />
    </onentry>

    <transition event="action.response"
                event:schema="events:#/components/schemas/ActionResponse"
                target="respond" />
  </state>

  <state id="respond">
    <onentry>
      <log label="SYSTEM" expr="'Policy specialist sending response...'" />

      <assign location="llm_response" expr="_event.data.message" />

      <log label="BOT" expr="llm_response" />
    </onentry>
    <transition target="done" />
  </state>

  <final id="done">
    <donedata>
      <param name="response" expr="llm_response" />
    </donedata>
  </final>

</agent>
