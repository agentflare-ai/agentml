<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
    targetNamespace="github.com/agentflare-ai/agentml/agent"
    xmlns:agent="github.com/agentflare-ai/agentml/agent"
    elementFormDefault="qualified">

    <xs:element name="agent">
        <xs:annotation>
            <xs:documentation>
                Agent root element replaces scxml as the document root.
                The datamodel attribute specifies which datamodel implementation to use.
                The use:* attributes are namespace declarations (equivalent to xmlns:*) that also load the namespace loader.
                Example: &lt;agent datamodel="ecmascript" use:memory="github.com/agentflare-ai/agentml/memory"&gt;
                Contains standard SCXML content (states, transitions, data, etc.) as direct children.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
            </xs:sequence>
            <xs:attribute name="datamodel" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The datamodel implementation to use for this agent</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:anyAttribute processContents="lax">
                <xs:annotation>
                    <xs:documentation>
                        Supports use:* attributes for namespace declarations (equivalent to xmlns:*).
                        Format: use:prefix="namespace-uri"
                        Example: use:memory="github.com/agentflare-ai/agentml/memory"
                    </xs:documentation>
                </xs:annotation>
            </xs:anyAttribute>
        </xs:complexType>
    </xs:element>

    <!-- Event schema attribute for transitions -->
    <xs:attribute name="schema" type="xs:string">
        <xs:annotation>
            <xs:documentation>
                JSON schema for validating event payloads on transition elements.
                Use as event:schema on &lt;transition&gt; elements.
                Example: event:schema='{"type": "object", "properties": {"text": {"type": "string"}}}'
            </xs:documentation>
        </xs:annotation>
    </xs:attribute>

</xs:schema>
